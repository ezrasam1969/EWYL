<<app.js>>

import React from 'react'
import './styles.css';
import Main from './Main';
import theme from './theme';
import { ChakraProvider } from '@chakra-ui/react';

const App = () => {
  return (
    <div className='Forms'>
      <ChakraProvider>
      <Main/>
      </ChakraProvider>
    </div>
  )
}

export default App;

<<index.js>>


import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import { ChakraProvider } from '@chakra-ui/react'
import { Input } from '@chakra-ui/react'
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <ChakraProvider>
      <App />
    </ChakraProvider> 
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();


<<Main.js>>



import React, { useState } from 'react';
import { Input } from '@chakra-ui/react'
import { px } from 'framer-motion'
import { Text } from '@chakra-ui/react'
import { Heading } from '@chakra-ui/react'
import {InputGroup, InputLeftElement, InputRightElement, Stack, Flex } from '@chakra-ui/react';
import { Button, ButtonGroup } from '@chakra-ui/react'
import styles from './styles.css'


const FormField = ({label,inputType,placeholder,value,onChange}) =>{
    return(
        <Flex align="center" marginBottom={4}>
      <Text fontSize='md' width="200px" textAlign="justify" marginRight={100}>{label}</Text>
    
        <Input type={inputType} placeholder={placeholder} value={value} onChange={onChange} htmlSize={14} width="300px" />
    </Flex>
  );
};

const Main = () => {
    const [title, setTitle] = useState('');
    const [client, setClient] = useState('');
    const [amount, setAmount] = useState('');
    const [letterNumber, setLetterNumber] = useState('');
    const [dateOfSanction, setDateOfSanction] = useState('');
    const [startingDate, setStartingDate] = useState('');
    const [endingDate, setEndingDate] = useState('');
    const [proof, setProof] = useState(null);

  const handleSubmit = (event) => {
    event.preventDefault(); // Prevent the default form submission
    const formData = {
      title,
      client,
      amount,
      letterNumber,
      dateOfSanction,
      startingDate,
      endingDate,
      proof,
    };
    console.log('Submitted Data:', formData);
    // Here you can add logic to save the data (e.g., send it to an API)
  };

  const handleReset = () => {
    setTitle('');
    setClient('');
    setAmount('');
    setLetterNumber('');
    setDateOfSanction('');
    setStartingDate('');
    setEndingDate('');
    setProof(null);
  };
  return (
    <Flex direction="column" align="center" justify="center" height="100vh" className='mains'>
    <div className='mains'>
        <Heading textAlign= "center" mb={4}>Consultancy Projects</Heading>
        <hr/>
        <br/>
        <form onSubmit={handleSubmit}>
        <div className='titles'>
            <FormField label="Title of the Consultancy:" inputType="text" placeholder="Enter the Title" value={title} onChange={(e)=>setTitle(e.target.value)} />
            <FormField label="Client:" inputType="text" placeholder="Client" value={client} onChange={(e) => setClient(e.target.value)}/>
            <FormField label="Amount Sanctioned:" inputType="text" placeholder="â‚¹" value={amount} onChange={(e) => setAmount(e.target.value)}/>
            <FormField label="Letter Number:" inputType="text" placeholder="Enter the Letter Number" value={letterNumber} onChange={(e) => setLetterNumber(e.target.value)}/>
            <FormField label="Date of Sanction:" inputType="date" value={dateOfSanction} onChange={(e) => setDateOfSanction(e.target.value)}/>
            <FormField label="Starting Date:" inputType="date" value={startingDate} onChange={(e) => setStartingDate(e.target.value)} />
            <FormField label="Ending Date:" inputType="date" value={endingDate} onChange={(e) => setEndingDate(e.target.value)}/>
            <FormField label="Proof:" inputType="file" onChange={(e) => setProof(e.target.files[0])} />
            </div>
        <Stack spacing={220} direction="row" marginTop={10}>
        <Button colorScheme='green'type="submit">Submit</Button>
        <Button colorScheme='teal'variant="outline" onClick={handleReset}>Reset</Button>
 
      </Stack>
      </form>
    </div>
    </Flex>
  );
};




export default Main;    
